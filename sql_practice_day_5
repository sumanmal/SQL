# FUNCTIONS, 
SELECT *
FROM SALES1 S1;

# FUNCTIONS 

DELIMITER &&
CREATE FUNCTION ADD_TO_COL(A INT)
RETURNS INT 
DETERMINISTIC
BEGIN 
	DECLARE B INT;
    SET B = A + 10;
    RETURN B;
END &&

SELECT MAX(S1.SALES)
FROM SALES1 S1;

SELECT S1.SHIPPING_COST AS SHIPPING_COST,
ADD_TO_COL(S1.SHIPPING_COST) AS NEW_SHIPPING_COST,
S1.QUANTITY AS PREV_QTY,
ADD_TO_COL(S1.QUANTITY) AS NEW_QTY
FROM SALES1 S1 

DELIMITER &&
CREATE FUNCTION FINAL_PROFIT(PROFIT INT, DISCOUNT INT)
RETURNS INT 
DETERMINISTIC
BEGIN 
	DECLARE FINAL_PROFIT INT;
    SET FINAL_PROFIT = PROFIT - DISCOUNT;
    RETURN FINAL_PROFIT;
END &&

SELECT S1.PROFIT, S1.DISCOUNT , FINAL_PROFIT(S1.PROFIT,S1.DISCOUNT) AS FINAL_PROFIT
FROM
SALES1 S1 ;

DELIMITER &&
CREATE FUNCTION REAL_DISCOUNT(DISCOUNT INT, SALES INT)
RETURNS INT 
DETERMINISTIC 
BEGIN
	DECLARE REAL_DISCOUNT INT;
    SET REAL_DISCOUNT = SALES * DISCOUNT;
    RETURN REAL_DISCOUNT;
END &&

SELECT S1.DISCOUNT, S1.SALES, REAL_DISCOUNT(S1.DISCOUNT, S1.SALES)
FROM SALES1 S1 


delimiter &&
create function final_profits_real(profit int, discount decimal(8,4), sales int)
returns int
deterministic
begin
declare final_profits_real int;
set final_profits_real = profit - sales * discount;
return final_profits_real;
end &&;

SELECT PROFIT,DISCOUNT,SALES,FINAL_PROFITS_REAL(PROFIT,DISCOUNT,SALES) AS FINAL_PROFITS_REAL
FROM SALES1 S1;

# CONVERT SOME OF INTEGER DATA INTO VARCHAR/STRING 

DELIMITER &&
CREATE FUNCTION INT_TO_VARCHAR(VAR INT)
RETURNS VARCHAR(30)
deterministic
BEGIN 
	DECLARE INPUT INT ;
    SET INPUT = VAR;
    RETURN VAR;
END &&
SELECT INT_TO_VARCHAR(5666);


# MARK 
SELECT MAX(SALES), MIN(SALES)
FROM SALES1;
/*
1 - 100 - SUPER AFFORDABLE PRODUCT
100 - 300 - AFFORDABLE 
300 - 600 - MODERATE PRICE 
600+ - EXPENSIVE 
*/
# CONDITIONAL STATEMENTS 
DELIMITER &&
CREATE FUNCTION MARK_SALES(VAR INT)
RETURNS VARCHAR(30)
deterministic
BEGIN
	DECLARE FLAG VARCHAR(30);
    IF VAR < 100 THEN 
		SET FLAG = 'SUPER AFFORDABLE PRODUCT';
    ELSEIF VAR > 100 AND VAR < 300 THEN
		SET FLAG = 'AFFORDABLE';
	ELSEIF VAR > 300 AND VAR < 600 THEN
		SET FLAG = 'MODERATE PRICE';
	ELSEIF VAR > 600 THEN
		SET FLAG = 'EXPENSIVE';
	ELSE 
		SET FLAG = 'NOTHING';
	END IF;
    RETURN FLAG;
END &&

SELECT S1.SALES, MARK_SALES(S1.SALES)
FROM SALES1 S1 ;

SELECT MARK_SALES(1500);

SELECT MARK_SALES(300);

ALTER TABLE SALES1
ADD COLUMN MARK_SALES VARCHAR(30);

UPDATE SALES1 S1
SET S1.MARK_SALES = MARK_SALES(S1.SALES);


# DIFFERENCE BETWEEN PROCEDURE AND FUNCTIONS ?
/*
PROCEDURE - QUERY , RETURNS QUERY
FUNCTION / UDF - ACTION (MANIPULATION OR TASK ON A VALUE), RETURN VALUES 
*/

# LOOPS:

set @var = 10;
generate_data : loop
set @var = @var + 1;
if @var = 100 then 
	leave generate_data;
end if;
end loop generate_data;

create table loop_table 
(
var int
);

DELIMITER &&
CREATE PROCEDURE INSERT_DATA()
BEGIN 
	set @var = 10;
	generate_data : loop
    INSERT INTO LOOP_TABLE VALUES (@VAR);
	set @var = @var + 1;
	if @var = 100 then 
		leave generate_data;
	end if;
	end loop generate_data;
END &&

CALL INSERT_DATA();
SELECT * FROM LOOP_TABLE;

# INSERT A RECORD INSIDE A TABLE BASED ON EVEN NUMBER , DIVISIBLE BY 3

DELIMITER &&
CREATE PROCEDURE INSERT_DATA2()
BEGIN 
	set @var = 10;
	generate_data : loop
    INSERT INTO LOOP_TABLE_2 VALUES (@VAR);
	set @var = @var + 2;
	if @var = 100 then 
		leave generate_data;
	end if;
	end loop generate_data;
END &&

CREATE TABLE LOOP_TABLE_3(VAR INT);


DELIMITER &&
CREATE PROCEDURE INSERT_DATA_3()
BEGIN 
SET @VAR = 1;
GENERATE_DATA : LOOP
IF @VAR % 3 = 0 THEN 
	INSERT INTO LOOP_TABLE_3 VALUES (@VAR);
END IF;
SET @VAR = @VAR + 1;
IF VAR = 100 THEN 
	LEAVE GENERATE_DATA;
END IF;
END LOOP GENERATE_DATA;
END &&

SELECT * FROM LOOP_TABLE_3;

/*
Task 
	1 . Create a loop for a table to insert a record into a tale for two columns in first coumn you have to inset a data ranging from 1 to 100 and in second column you hvae to inset a square of the first column 
	2 . create a user defined function to find out a date differences in number of days 
    3 . create a UDF to find out a log base 10 of any given number 
    4 . create a UDF which will be able to check a total number of records avaible in your table 
    5 . create a procedure to find out  5th highest profit in your sales table you dont have to use rank and windowing function 
*/

/* Answer */
-- 1.


create table loop_table_test_1( 
var1 int,
var2 int
);

delimiter &&
create procedure INSERT_DATA_4()
begin 
	set @var = 1;
    generate_data : loop 
    if @var < 101 then
		insert into loop_table_test_1 (var1, var2) values (@var, power(@var,2));
        set @var = @var + 1;
	else
		leave generate_data;
	end if;
	end loop generate_data;
end && 

call INSERT_DATA_4();
select * from loop_table_test_1; 

-- 2.

delimiter &&
create function date_diff_days(var1 date , var2 date )
returns int 
deterministic
begin 
	declare variable int;
    set variable = datediff(var1,var2);
    return variable;
end &&

select date_diff_days("2017-11-25 09:34:21","2017-06-15 ");

-- 3
delimiter &&
create function log_base_10(var int)
returns int
deterministic
begin 
	declare variable int;
    set variable = log10(var);
    return variable;
end &&

select log_base_10(1000);


-- 4
delimiter &&
create function count_records_6(var varchar(30))
returns int
deterministic 
begin 
	declare var_ int;
    select count(*) into var_
    from sales.loop_table;
    return var_;
end &&

select count_records_6("sales.loop_table");

-- 5
delimiter &&
create procedure fifth_largest_sales ()
begin
	select s.sales
    from sales1 s
    order by s.sales desc 
    limit 1 offset 4;
end && 

call fifth_largest_sales ();

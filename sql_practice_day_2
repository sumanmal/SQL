
/* Create a procedure 
Maintain indentation and syntax
*/

DELIMITER &&
CREATE PROCEDURE SELECT_REC()
BEGIN 
	SELECT * 
	FROM BANK_DETAILS ;
END &&

CALL SELECT_REC();


DELIMITER &&
CREATE PROCEDURE MIN_BALANCE()
BEGIN 
	SELECT BD.* 
	FROM BANK_DETAILS BD
	ORDER BY BD.BALANCE ASC
	LIMIT 1;
END &&

CALL MIN_BALANCE();

DELIMITER &&
CREATE procedure MAX_BALANCE()
BEGIN 
SELECT BD.* 
FROM BANK_DETAILS BD
ORDER BY BD.BALANCE DESC
LIMIT 1;
END &&

CALL MAX_BALANCE();


SELECT AVG(BD.BALANCE) AS AVG_BALANCE
FROM BANK_DETAILS BD
WHERE BD.JOB = "admin.";


# How to pass parameter in a procedure ?

SELECT AVG(BD.BALANCE) AS AVG_BALANCE
FROM BANK_DETAILS BD
WHERE BD.JOB = "admin.";

# PASSING 1 PARAMETER 
DELIMITER &&
CREATE PROCEDURE AVG_BAL_JOBROLE_1(IN VAR VARCHAR(30))
BEGIN 
	SELECT AVG(BD.BALANCE) AS AVG_BALANCE
	FROM BANK_DETAILS BD
	WHERE BD.JOB = VAR;
END &&

CALL AVG_BAL_JOBROLE_1('ADMIN.');
CALL AVG_BAL_JOBROLE_1('RETIRED');
CALL AVG_BAL_JOBROLE_1('UNKNOWN');

# PASSING MULTIPLE PARAMETERS 
DELIMITER &&
create PROCEDURE SEL_EDU_JOB()
BEGIN 
	SELECT BD.* 
    FROM BANK_DETAILS BD
    WHERE BD.EDUCATION = 'PRIMARY'
    AND BD.JOB = 'blue-collar';
END &&

DELIMITER &&
CREATE PROCEDURE SEL_EDU_JOB_1(IN VAR1 VARCHAR(30), IN VAR2 VARCHAR(30) )
BEGIN 
	SELECT BD.* 
    FROM BANK_DETAILS BD
    WHERE BD.EDUCATION = VAR1
    AND BD.JOB = VAR2;
END &&



CALL SEL_EDU_JOB();
CALL SEL_EDU_JOB_1('PRIMARY', 'retired');
CALL SEL_EDU_JOB_1('PRIMARY', 'blue-collar');

# VIEWS 
/*
VIEWS are table which hold the subset of a data. 
SHORTER VERSION OF A TABLE 
*/

CALL SELECT_REC();

CREATE VIEW BANK_VIEW AS 
SELECT BD.AGE, BD.JOB , BD.MARITAL, BD.BALANCE, BD.EDUCATION
FROM BANK_DETAILS BD

SELECT * FROM BANK_VIEW;

# View is a subset of the table. Internally it is not going to reserve a data in any physical places 
SELECT AVG(BD.BALANCE) AS AVG_BALANCE
FROM BANK_VIEW BD
WHERE BD.JOB = "admin.";






show databases;
use dress_data;
show tables;
create database sales;
use sales;
CREATE TABLE sales1 (
	`order_id` VARCHAR(15) NOT NULL, 
	`order_date` VARCHAR(15) NOT NULL, 
	`ship_date` VARCHAR(15) NOT NULL, 
	`ship_mode` VARCHAR(14) NOT NULL, 
	`customer_name` VARCHAR(22) NOT NULL, 
	`segment` VARCHAR(11) NOT NULL, 
	`state` VARCHAR(36) NOT NULL, 
	`country` VARCHAR(32) NOT NULL, 
	`market` VARCHAR(6) NOT NULL, 
	`region` VARCHAR(14) NOT NULL, 
	`product_id` VARCHAR(16) NOT NULL, 
	`category` VARCHAR(15) NOT NULL, 
	`sub_category` VARCHAR(11) NOT NULL, 
	`product_name` VARCHAR(127) NOT NULL, 
	`sales` DECIMAL(38, 0) NOT NULL, 
	`quantity` DECIMAL(38, 0) NOT NULL, 
	`discount` DECIMAL(38, 3) NOT NULL, 
	`profit` DECIMAL(38, 8) NOT NULL, 
	`shipping_cost` DECIMAL(38, 2) NOT NULL, 
	`order_priority` VARCHAR(8) NOT NULL, 
	`year` DECIMAL(38, 0) NOT NULL
);

DROP TABLE sales1;
SET SESSION sql_mode = '';
LOAD DATA infile 'C:/sales_data_final.csv'
INTO TABLE sales1
FIELDS TERMINATED BY ','
ENCLOSED BY '"'
LINES TERMINATED BY '\n'
IGNORE 1 ROWS ;

# CONVERT order_date which is in varchar in date time format.
select * from sales1 ;
select str_to_date(s.order_date,'%m/%d/%Y') from sales1 s;

# Put it in a table as well so we can use in future. Create a new column in the existing table

alter table sales1 
add column order_date_new date after order_date ;
SET SQL_SAFE_UPDATES = 0;
update sales1 
set order_date_new = str_to_date(order_date,'%m/%d/%Y');

alter table sales1
add column ship_date_new date after ship_date;

update sales1 s
set s.ship_date_new = str_to_date(s.ship_date,'%m/%d/%Y');

SELECT S.*
FROM SALES1 S
WHERE S.SHIP_DATE_NEW < '2011-01-08';

# pull out record from 4th and 5th month 

select *
from sales1 
where ship_date_new between '2011-01-01' and '2022-08-30';

# Current date and time of system with timestamp
select now();
# Current date of system 
select curdate();
# Current time of system 
select curtime();

# TRY FILTER ON SALES 

select * from sales1 where ship_date_new < date_sub(now(), interval 3 year);
select date_sub(now(),interval 1 Week);
select date_sub(now(),interval 3 Day);
select date_sub(now(),interval 3 Month);
select date_sub(now(),interval 3 Year);
select year(now());
select dayname(now());
select dayname(date_sub(now(),interval 2.1 month));

# Create one new column in sales1 and add current date in it.

use sales;

alter table sales1 
add column flag date after order_id;

update sales1
set flag = now();

select * from sales1;

alter table sales1
modify column year datetime;

alter table sales1
add column year_new int after order_date , 
add column month_new int after order_date ,
add column day_new int after order_date ;

update sales1 set year_new = year(order_date_new);
update sales1 set month_new = month(order_date_new);
update sales1 set day_new = day(order_date_new);


alter table sales1
drop column year_new,
drop column month_new,
drop column day_new;

# SELECT AVG SALE FOR 2014
SELECT S.YEAR_NEW, 
AVG(S.SALES) AS AVG_SALES
FROM SALES1 S
WHERE S.YEAR_NEW = 2014;


# Year Wise average sales 

SELECT
S1.YEAR_NEW AS YEAR,
AVG(S1.SALES) AS AVG_SALES
FROM SALES1 S1
GROUP BY S1.YEAR_NEW ;

# TELL ME WHETHER MY SALES HAS INCREASED OVER THE YEAR OR NOT ?

SELECT
S1.YEAR_NEW AS YEAR,
AVG(S1.SALES) AS AVG_SALES,
SUM(S1.SALES) AS TOTAL_SALES
FROM SALES1 S1
GROUP BY S1.YEAR_NEW ;

# WHAT WAS THE MIN AND MAX SALES PER YEAR ?
SELECT
S1.YEAR_NEW AS YEAR,
AVG(S1.SALES) AS AVG_SALES,
SUM(S1.SALES) AS TOTAL_SALES,
MIN(S1.SALES) AS MIN_SALE,
MAX(S1.SALES) AS MAX_SALE
FROM SALES1 S1
GROUP BY S1.YEAR_NEW ;

# WHAT IS THE NUMBER OF ITEM SOLD EVERY YEAR ?

SELECT 
S1.YEAR_NEW AS YEAR,
AVG(S1.SALES) AS AVG_SALES,
SUM(S1.SALES) AS TOTAL_SALES,
MIN(S1.SALES) AS MIN_SALE,
MAX(S1.SALES) AS MAX_SALE,
SUM(QUANTITY) AS TOTAL_ITEMS_SOLD
FROM SALES1 S1
GROUP BY S1.YEAR_NEW;

# WHAT IS THE COST TO COMPANY EVERY YEAR ?

SELECT 
S1.YEAR_NEW AS YEAR,
AVG(S1.SALES) AS AVG_SALES,
SUM(S1.SALES) AS TOTAL_SALES,
MIN(S1.SALES) AS MIN_SALE,
MAX(S1.SALES) AS MAX_SALE,
SUM(S1.QUANTITY) AS TOTAL_ITEMS_SOLD,
SUM(S1.SHIPPING_COST + S1.DISCOUNT*S1.SALES/100) AS CTC
FROM SALES1 S1
GROUP BY S1.YEAR_NEW;


# CHECK IF DICSOUNT IS GIVEN OR NOT ?

SELECT S1.ORDER_ID, 
IF (S1.DISCOUNT > 0, 'YES', 'NO') AS DISCOUNT_FLAG, 
S1.DISCOUNT 
FROM SALES1 S1;

# EXTRACT ALL THE ITEMS WITH DISCOUNT AND WITHOUT DISCOUNT 

ALTER TABLE SALES1
ADD column DISCOUNT_FLAG VARCHAR(3) AFTER DISCOUNT;

UPDATE SALES1 S1
SET S1.DISCOUNT_FLAG = IF(S1.DISCOUNT > 0, 'YES', 'NO');

SELECT COUNT(S1.DISCOUNT_FLAG) AS COUNT, 
S1.DISCOUNT_FLAG AS DISCOUNT_FLAG
FROM SALES1 S1
group by S1.DISCOUNT_FLAG
